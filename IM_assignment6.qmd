---
title: "Information Management Assignment 6"
format: html
---

03/13/2025

### 1. JSON vs XML Websites

-   JSON is a lightweight, text-based data format used for transmitting data between a server and a web application. It is easier for us to read and write than XML due to its flexibility. However, it tends to take up more storage space and can be CPU-intensive. Many websites use JSON nowadays. Among them is GitHub, which sends and receives data in JSON format between its system and other applications. GitHub has many features, like managing repositories, pull requests and issues. It also relies on MySQL to store information.

-   XML, on the other hand, uses tags enclosed in angle brackets to mark data. Unlike relational models, it allows us to easily add new tags and create hierarchical structures. There are not that many websites these days that use XML. However, after scouring through the internet, I found a website about the [UK legislation](https://www.legislation.gov.uk/) that uses XML. The layout is like any other website, but it is set up using XML. When going into 'inspect element,' I could see codes like the following (just to show if the website uses XML or not):

`<title xmlns="http://www.w3.org/1999/xhtml">Legislation.gov.uk</title>`

`<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" src="/scripts/jquery-3.7.1.min.js"></script>`

### 2. SQL Exercise

-   Find the IDs of students who do not have an associated advisor, using no subqueries and no set operations

    ```{r, eval=FALSE}
    select s.ID
    from student s
    left outer join advisor as a on s.ID = a.s_ID
    where a.s_ID is null
    ```

    ![](images/clipboard-2676652634.png){width="62" height="121"}

-   Write an SQL query to find the names and IDs of those instructors who teach every course taught in their department (results ordered by name)

    ```{r, eval=FALSE}
    select i.id, i.name
    from instructor as i
    join course as c on i.dept_name = c.dept_name
    left join teaches as t on i.id = t.id and c.course_id = t.course_id
    group by i.id, i.name
    having count(distinct c.course_id) = count(distinct t.course_id)
    order by i.name
    ```

    ![](images/clipboard-3719643329.png){width="125"}

### 3. R and PostgreSQL

#### Loading the libraries

```{r}
library(RPostgres) # Provides the Postgres() driver
library(DBI)        # Generic R Database Interface
library(odbc)       # Interface to ODBC driver
```

#### Connecting to PostgreSQL

```{r}
con <- dbConnect(
  RPostgres::Postgres(),
  dbname   = Sys.getenv("DB_NAME"),
  host     = Sys.getenv("DB_HOST"),
  port     = as.integer(Sys.getenv("DB_PORT")),
  user     = Sys.getenv("DB_USER"),
  password = Sys.getenv("DB_PASSWORD")
)
```

#### Fetching instructor data

```{r}
instructor_data <- dbGetQuery(con, "SELECT * FROM instructor")
head(instructor_data, 20)
```

#### Finding computer science instructors with salaries greater than \$60,000

```{r}
comp_sci_instructors <- dbGetQuery(
  con, 
  "SELECT * FROM instructor 
   WHERE dept_name = 'Comp. Sci.' AND salary > 60000;"
)
comp_sci_instructors
```

#### Finding students with total credits greater than or equal to 50

```{r}
student_data <- dbGetQuery(con, "SELECT * FROM student WHERE tot_cred >= 50")
head(student_data)
```

Here is the [.csv file](instructor_export.csv) that is converted from the entire 'instructor' table.
