message("Starting downloads")
results <- 1:5 %>%
purrr::map_chr(~ download_govfiles_pdf(pdf_govfiles_url[.], pdf_govfiles_id[.]))
message("Finished downloads")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
# Print results
print(results)
## Download all: Caution, this may take a while and lots of space
start.time <- Sys.time()
message("Starting downloads")
results <- 1:length(pdf_govfiles_url) %>%
purrr::map_chr(~ download_govfiles_pdf(pdf_govfiles_url[.], pdf_govfiles_id[.]))
gc(reset=T)
# install.packages(c("purrr", "magrittr")
library(purrr)
library(magrittr) # Alternatively, load tidyverse
setwd("C:\\Users\\chakr\\OneDrive\\Github Website\\cykimsovanna.github.io")
library(rjson)
library(jsonlite)
library(data.table)
library(readr)
## CSV method
govfiles= read.csv(file="https://github.com/datageneration/datamethods/raw/refs/heads/master/webdata/govinfo-search-results-2024-10-13T07_10_42.csv", skip=2)
## JSON method
### rjson
gf_list <- rjson::fromJSON(file ="https://github.com/datageneration/datamethods/raw/refs/heads/master/webdata/govinfo-search-results-2024-10-13T07_18_29.json")
govfile2=dplyr::bind_rows(gf_list$resultSet)
### jsonlite
gf_list1 = jsonlite::read_json("https://github.com/datageneration/datamethods/raw/refs/heads/master/webdata/govinfo-search-results-2024-10-13T07_18_29.json")
### Extract the list
govfiles3 <- gf_list1$resultSet
### One more step
govfiles3 <- gf_list1$resultSet |> dplyr::bind_rows()
# Preparing for bulk download of government documents
govfiles$id = govfiles$packageId
pdf_govfiles_url = govfiles3$pdfLink
pdf_govfiles_id <- govfiles3$index
# Directory to save the pdf's
# Be sure to create a folder for storing the pdf's
save_dir <- "C:\\Users\\chakr\\OneDrive\\Github Website\\cykimsovanna.github.io\\KM4_govtdata"
# Function to download pdfs
download_govfiles_pdf <- function(url, id) {
tryCatch({
destfile <- paste0(KM4_govtdata, "govfiles_", id, ".pdf")
download.file(url, destfile = destfile, mode = "wb") # Binary files
Sys.sleep(runif(1, 1, 3))  # Important: random sleep between 1 and 3 seconds to avoid suspicion of "hacking" the server
return(paste("Successfully downloaded:", url))
},
error = function(e) {
return(paste("Failed to download:", url))
})
}
## Try downloading one document
start.time <- Sys.time()
message("Starting downloads")
results <- 1:1 %>%
purrr::map_chr(~ download_govfiles_pdf(pdf_govfiles_url[.], pdf_govfiles_id[.]))
message("Finished downloads")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
# Print results
print(results)
file.create(KM_assignment5.qmd)
file.create("KM_assignment5.qmd")
install.packages("ranger")
Y
file.create("IM_shinypractice.qmd")
file.create("IM_assignment7.qmd")
# Load required libraries
library(shiny)
library(DBI)
library(RPostgres)
library(ggplot2)
# Define the User Interface (UI)
ui <- fluidPage(
titlePanel("EPPS6354 Shiny workshop 1: University Database"),
mainPanel(
plotOutput("salaryPlot"),
plotOutput("studentPlot")
)
)
# Define the Server Logic
server <- function(input, output, session) {
# Establish connection to the PostgreSQL database
con <- dbConnect(
RPostgres::Postgres(),
dbname   = "university",
host     = "localhost",
port     = 5432,
user     = "postgres",
password = "cyd15"
)
# Disconnect on session end
session$onSessionEnded(function() {
dbDisconnect(con)
})
# Plot 1: Average Instructor Salary by Department
instructor_data <- reactive({
query <- "SELECT dept_name, AVG(salary) AS avg_salary
FROM instructor
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$salaryPlot <- renderPlot({
data <- instructor_data()
ggplot(data, aes(x = reorder(dept_name, -avg_salary), y = avg_salary)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
title = "Average Instructor Salary by Department",
x = "Department",
y = "Average Salary"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
# Plot 2: Student Enrollment by Department
student_data <- reactive({
query <- "SELECT dept_name, COUNT(*) AS student_count
FROM student
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$studentPlot <- renderPlot({
data <- student_data()
ggplot(data, aes(x = reorder(dept_name, -student_count), y = student_count)) +
geom_bar(stat = "identity", fill = "darkorange") +
theme_minimal() +
labs(
title = "Student Enrollment by Department",
x = "Department",
y = "Number of Students"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
# Define the Server Logic
server <- function(input, output, session) {
# Establish connection to the PostgreSQL database
con <- dbConnect(
RPostgres::Postgres(),
dbname   = "university",
host     = "localhost",
port     = 5432,
user     = "postgres",
password = "cyd15"
)
# Disconnect on session end
session$onSessionEnded(function() {
dbDisconnect(con)
})
# Plot 1: Average Instructor Salary by Department
instructor_data <- reactive({
query <- "SELECT dept_name, AVG(salary) AS avg_salary
FROM instructor
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$salaryPlot <- renderPlot({
data <- instructor_data()
ggplot(data, aes(x = reorder(dept_name, -avg_salary), y = avg_salary)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
title = "Average Instructor Salary by Department",
x = "Department",
y = "Average Salary"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
# Plot 2: Student Enrollment by Department
student_data <- reactive({
query <- "SELECT dept_name, COUNT(*) AS student_count
FROM student
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$studentPlot <- renderPlot({
data <- student_data()
data$student_count <- as.numeric(data$student_count)
ggplot(data, aes(x = reorder(dept_name, -student_count), y = student_count)) +
geom_bar(stat = "identity", fill = "darkorange") +
theme_minimal() +
labs(
title = "Student Enrollment by Department",
x = "Department",
y = "Number of Students"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
# Define the User Interface (UI)
ui <- fluidPage(
titlePanel("EPPS6354 Shiny workshop 1: University Database"),
mainPanel(
plotOutput("salaryPlot"),
plotOutput("studentPlot")
)
)
# Define the Server Logic
server <- function(input, output, session) {
# Establish connection to the PostgreSQL database
con <- dbConnect(
RPostgres::Postgres(),
dbname   = "university",
host     = "localhost",
port     = 5432,
user     = "postgres",
password = "cyd15"
)
# Disconnect on session end
session$onSessionEnded(function() {
dbDisconnect(con)
})
# Plot 1: Average Instructor Salary by Department
instructor_data <- reactive({
query <- "SELECT dept_name, AVG(salary) AS avg_salary
FROM instructor
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$salaryPlot <- renderPlot({
data <- instructor_data()
ggplot(data, aes(x = reorder(dept_name, -avg_salary), y = avg_salary)) +
geom_bar(stat = "identity", fill = "darkgrey") +
theme_minimal() +
labs(
title = "Average Instructor Salary by Department",
x = "Department",
y = "Average Salary"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
# Plot 2: Student Enrollment by Department
student_data <- reactive({
query <- "SELECT dept_name, COUNT(*) AS student_count
FROM student
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$studentPlot <- renderPlot({
data <- student_data()
data$student_count <- as.numeric(data$student_count)
ggplot(data, aes(x = reorder(dept_name, -student_count), y = student_count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
theme_minimal() +
labs(
title = "Student Enrollment by Department",
x = "Department",
y = "Number of Students"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(DBI)
library(RPostgres)
library(ggplot2)
# Define the User Interface (UI)
ui <- fluidPage(
titlePanel("EPPS6354 Shiny workshop 1: University Database"),
mainPanel(
plotOutput("salaryPlot"),
plotOutput("studentPlot")
)
)
# Define the Server Logic
server <- function(input, output, session) {
# Establish connection to the PostgreSQL database
con <- dbConnect(
RPostgres::Postgres(),
dbname   = "university",
host     = "localhost",
port     = 5432,
user     = "postgres",
password = "cyd15"
)
# Disconnect on session end
session$onSessionEnded(function() {
dbDisconnect(con)
})
# Plot 1: Average Instructor Salary by Department
instructor_data <- reactive({
query <- "SELECT dept_name, AVG(salary) AS avg_salary
FROM instructor
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$salaryPlot <- renderPlot({
data <- instructor_data()
ggplot(data, aes(x = reorder(dept_name, -avg_salary), y = avg_salary)) +
geom_bar(stat = "identity", fill = "maroon") +
theme_minimal() +
labs(
title = "Average Instructor Salary by Department",
x = "Department",
y = "Average Salary"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
# Plot 2: Student Enrollment by Department
student_data <- reactive({
query <- "SELECT dept_name, COUNT(*) AS student_count
FROM student
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$studentPlot <- renderPlot({
data <- student_data()
data$student_count <- as.numeric(data$student_count)
ggplot(data, aes(x = reorder(dept_name, -student_count), y = student_count)) +
geom_bar(stat = "identity", fill = "darkgreen") +
theme_minimal() +
labs(
title = "Student Enrollment by Department",
x = "Department",
y = "Number of Students"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(DBI)
library(RPostgres)
library(ggplot2)
# Define the User Interface (UI)
ui <- fluidPage(
titlePanel("EPPS6354 Shiny workshop 1: University Database"),
mainPanel(
plotOutput("salaryPlot"),
plotOutput("studentPlot")
)
)
# Define the Server Logic
server <- function(input, output, session) {
# Establish connection to the PostgreSQL database
con <- dbConnect(
RPostgres::Postgres(),
dbname   = "university",
host     = "localhost",
port     = 5432,
user     = "postgres",
password = "cyd15"
)
# Disconnect on session end
session$onSessionEnded(function() {
dbDisconnect(con)
})
# Plot 1: Average Instructor Salary by Department
instructor_data <- reactive({
query <- "SELECT dept_name, AVG(salary) AS avg_salary
FROM instructor
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$salaryPlot <- renderPlot({
data <- instructor_data()
ggplot(data, aes(x = reorder(dept_name, -avg_salary), y = avg_salary)) +
geom_bar(stat = "identity", fill = "darkgreen") +
theme_minimal() +
labs(
title = "Average Instructor Salary by Department",
x = "Department",
y = "Average Salary"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
# Plot 2: Student Enrollment by Department
student_data <- reactive({
query <- "SELECT dept_name, COUNT(*) AS student_count
FROM student
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$studentPlot <- renderPlot({
data <- student_data()
data$student_count <- as.numeric(data$student_count)
ggplot(data, aes(x = reorder(dept_name, -student_count), y = student_count)) +
geom_bar(stat = "identity", fill = "navyblue") +
theme_minimal() +
labs(
title = "Student Enrollment by Department",
x = "Department",
y = "Number of Students"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
renv::snapshot()
Y
renv::snapshot()
# Load required libraries
library(shiny)
library(DBI)
library(RPostgres)
library(ggplot2)
# Define the User Interface (UI)
ui <- fluidPage(
titlePanel("EPPS6354 Shiny workshop 1: University Database"),
mainPanel(
plotOutput("salaryPlot"),
plotOutput("studentPlot")
)
)
# Define the Server Logic
server <- function(input, output, session) {
# Establish connection to the PostgreSQL database
con <- dbConnect(
RPostgres::Postgres(),
dbname   = "university",
host     = "localhost",
port     = 5432,
user     = "postgres",
password = "cyd15"
)
# Disconnect on session end
session$onSessionEnded(function() {
dbDisconnect(con)
})
# Plot 1: Average Instructor Salary by Department
instructor_data <- reactive({
query <- "SELECT dept_name, AVG(salary) AS avg_salary
FROM instructor
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$salaryPlot <- renderPlot({
data <- instructor_data()
ggplot(data, aes(x = reorder(dept_name, -avg_salary), y = avg_salary)) +
geom_bar(stat = "identity", fill = "darkgreen") +
theme_minimal() +
labs(
title = "Average Instructor Salary by Department",
x = "Department",
y = "Average Salary"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
# Plot 2: Student Enrollment by Department
student_data <- reactive({
query <- "SELECT dept_name, COUNT(*) AS student_count
FROM student
GROUP BY dept_name;"
dbGetQuery(con, query)
})
output$studentPlot <- renderPlot({
data <- student_data()
data$student_count <- as.numeric(data$student_count)
ggplot(data, aes(x = reorder(dept_name, -student_count), y = student_count)) +
geom_bar(stat = "identity", fill = "navyblue") +
theme_minimal() +
labs(
title = "Student Enrollment by Department",
x = "Department",
y = "Number of Students"
) +
theme(
axis.text.x = element_text(angle = 90, hjust = 1),
text = element_text(family = "Palatino")
)
})
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
file.create("IMProjectShowcase.qmd")
