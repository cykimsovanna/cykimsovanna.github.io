---
title: "Information Management Assignment 4"
format: html
---

### 1. Explain the difference between a weak and strong entity set

-   A *weak entity set* does not have a primary key and must be associated with an identifying entity (or strong entity), and have a total participation in its identifying relationship set. It uses discriminator attributes to help differentiate among weak entities that are tied to the same identifying entity.
-   A *strong entity set* has a primary key that uniquely identifies each entity within the set. It does not depend on other entities and can exist without relationships. Below is an example that shows a strong entity (left) and a weak entity (right).

![](images/IM4_1.drawio.png)

### 2. Design an E-R diagram for keeping track of the scoring statistics of my favorite sports team

-   The number of `goals_scored` for every match will be added up to the `total_goals_scored` for each individual player respectively. Same applies to `total_goals_scored`, `total_fouls_committed`, `total_yellow_card` and `total_red_card`.
-   Meanwhile the `goals_scored` of each player in the team will be added to either the `home_score` or `away_score`.
-   The `winner` would determine the `standing` of each team as they gain points.

![](images/IM4_2.drawio-02.png)

### 3. Practice SQL

-   In this following query below, appending `natural join section` in the `from` clause would not change the result because the `section` table already contains the same information as in the `takes` table, since the attributes that we are looking for, like `course_id`, `semester`, `year` and `sec_id`, are all present in both tables.

    ```{r, eval=FALSE}
    select course_id, semester, year, sec_id, avg (tot_cred)  
    from takes natural join student 
    where year = 2017 
    group by course_id, semester, year, sec_id
    having count (ID) >= 2
    ```

    ![](images/clipboard-1767301816.png)

-   To find the ID of any student who has never taken a course at the university by using no sub-queries and no set operations, I would use the following codes:

    ```{r, eval=FALSE}
    select s.ID, s.name
    from student as s
    left outer join takes t on s.ID = t.ID
    where t.course_id is null
    ```

    ![](images/clipboard-2700333086.png){width="109"}
